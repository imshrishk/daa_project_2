{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CS F364 Assignment Report","text":""},{"location":"#group-51","title":"Group 51","text":"<ul> <li>Sameehan Nikhil Saolapurkar (2022A7PS1359H)</li> <li>Paarth Shukla (2022A7PS1287H)</li> <li>Abhinivesh Mitra (2022A7PS1311H)</li> <li>Shrish Kumar (2022A7PS1295H)</li> <li>Mohammed Kamaalullah Khan Quadri (2022A7PS0109H)</li> </ul>"},{"location":"#introduction","title":"Introduction","text":"<p>The paper given addresses the problem of finding the densest subgraph (DSD) in large graphs, a fundamental task in graph mining with applications in network analysis and bioinformatics. The authors introduce a core-based approach that leverages the concept of k-cores (dense subgraphs where every vertex has at least k connections) to accelerate computations.</p> <p>This algorithm implemented finds the densest subgraph in an undirected graph, generalizing to cliques of size h (default h=2, i.e., edges). The main steps are:</p> <ul> <li>Clique Enumeration: It first enumerates all (h\u22121)-cliques in the graph. For h=2, these are just the vertices; for larger h, it finds all cliques of size h\u22121.</li> <li>Clique Degree Calculation: For each vertex, it calculates the number of (h\u22121)-cliques it can extend to a full h-clique, storing this as the \"clique degree.\"</li> <li>Binary Search on Density: The algorithm performs a binary search over possible density values (number of h-cliques per vertex) to find the maximum achievable density.</li> <li>Max-Flow Construction: For each candidate density, it constructs a flow network where capacities are based on clique degrees and the candidate density. It then runs the Ford-Fulkerson algorithm to compute the maximum flow.</li> <li>Minimum Cut Extraction: If the maximum flow is insufficient, it extracts the minimum cut in the flow network to identify the set of vertices forming the densest subgraph.</li> <li>Density Calculation: Finally, it computes and reports the density of the found subgraph as the number of h-cliques divided by the number of vertices in the subgraph.</li> </ul> <p>This approach generalizes the classic densest subgraph problem (where h=2) to larger cliques.</p>"},{"location":"#results","title":"Results","text":""},{"location":"#dataset-netscience","title":"Dataset: NetScience","text":""},{"location":"#densest-subgraph-result","title":"Densest Subgraph Result:","text":"Size of the clique Density Number of vertices 2 9.5 20 3 57 20 4 242.25 20"},{"location":"#dataset-as733","title":"Dataset: as733","text":"Size of the clique Density Number of vertices 2 8.875 40 3 35.9 33 4 85.125 32"}]}